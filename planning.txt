Classes: MathGame, Player, Question

Class Roles and Methods:

------
1. MathGame
Role:
    Acts as the controller of the game, managing the game flow, turns, and interactions between players and questions.
State:
    players (array of Player objects)
    current_player (Player object)
Methods:
    initialize: Set up players, initialize the first turn, and set the initial current player.
    play: Contains the game loop, alternating turns between players, checking game over conditions, and managing the current player.

        def play
          # ... game setup and loop ...

          question = Question.new
          if question.ask_question(current_player)
            puts "Correct!"
          else
            puts "Incorrect!"
            current_player.update_lives(-1) # Decrease player's lives by 1
          end

          # ... check for game over, switch players, etc. ...
        end

    switch_player: Changes the current_player to the next player.
Game Loop: Contains the game loop.
Current Player Management: Manages the current player within this class.
------

------
2. Player
Role: 
    Represents a player in the game, keeping track of their state.
State:
    lives (int)
Methods:
    initialize: Set up the player with a certain number of lives.
    update_lives: Decrease lives when a question is answered incorrectly.
    show_lives: Display the current number of lives.
------

------
3. Question
Role: 
    Generates and manages math questions, including verifying answers.
Methods:
    def ask_question(current_player)
      num1 = num_between_1_to_20
      num2 = num_between_1_to_20
      operator = random_operator
      correct_answer = calculate_answer(num1, num2, operator)

      puts "#{current_player.name}: What does #{num1} #{operator} #{num2} equal?"
      player_answer = gets.chomp.to_i

      player_answer == correct_answer # returns true if correct, false if not
    end

    private

    def calculate_answer(num1, num2, operator)
      case operator
      when '+'
        num1 + num2
      when '-'
        num1 - num2
      when '*'
        num1 * num2
      when '/'
        num1 / num2
      end
    end
  end
    User Input/Output: This class will handle I/O related to questions (asking and receiving answers).
                       if !answer from player player.lives -= 1
------
